<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- context:component-scan : base-package에 있는 클래스 중 @Component 어노테이션 설정되어있는 
		객체를 찾아서 자동으로 객체를 생성 -->
	<context:component-scan
		base-package="com.springbook.biz"></context:component-scan>

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- DataSource 설정 -->
	<!-- 외부 properties파일 참조 -->
	<context:property-placeholder
		location="classpath:config/datasource.properties" />

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- setter 메소드를 이용한 의존성 주입 -->
		<!-- Oracle -->
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- JDBCTemplate -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- sessionFactory 객체 등록 -->
	<!-- sqlSessionFactory가 SqlSession을 생산하기 위해서는 dataSource와 등록된 mapper정보가 
		필수 -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:sql-map-config.xml"></property>
	</bean>

	<!-- SqlSessionTemplate 객체 등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sessionFactory"></constructor-arg>
	</bean>

	<!-- Transaction 설정 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- Trasaction advice 등록 -->
	<!-- 트랜잭션에선 commit이나 rollback 어떤 어드바이스 메소드가 호출될지 모르기 때문에 어드바이스 메소드를 지정할 
		수 없고 aspect가 아닌 advisor로 aop 설정해야됨 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- tx:attributes : Transaction advice 동작시점을 설정, 포인트컷 지정없이 메소드 지정가능 -->
		<tx:attributes>
			<!-- tx:method : advice 동작할 메소드 지정 read-only : transaction이 동작하지 않음(get으로 
				시작하는 메소드들에서는 트랜잭션 동작x) get*으로 시작하는 메소드들을 제외한 모든 메소드들에서는 트랜잭션이 동작o -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut
			expression="execution(* com.springbook.biz..*(..))" id="txPointcut" />

		<aop:advisor pointcut-ref="txPointcut"
			advice-ref="txAdvice" />
	</aop:config>


	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="username" value="bongja1203@gmail.com" />
		<property name="password" value="qhdwkdoql1!" />

		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.auth">true</prop>


			</props>
		</property>

	</bean>
	<bean id="email" class="com.springbook.biz.email.Email">
	</bean>
	<bean id="emailSender"
		class="com.springbook.biz.email.EmailSender">
	</bean>


</beans>